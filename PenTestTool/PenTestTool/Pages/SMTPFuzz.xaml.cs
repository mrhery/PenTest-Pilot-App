using MailKit;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class SMTPFuzz : ContentPage
    {
        ObservableCollection<string> statuses = new ObservableCollection<string>();
        public SMTPFuzz()
        {
            InitializeComponent();

            Title = "SMTP Client";

            mail_logs.ItemsSource = statuses;
            mail_logs.ItemSelected += Mail_logs_ItemSelected;
            send.Clicked += Send_Clicked;
            
        }

        private void Mail_logs_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            throw new NotImplementedException();
        }

        bool SENDING_MAIL = false;

        private void Send_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(host.Text))
            {
                DisplayAlert("Oops!", "Host cannot be emtpy.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(port.Text))
            {
                DisplayAlert("Oops!", "Port number cannot be emtpy.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(rcpt.Text))
            {
                DisplayAlert("Oops!", "Recipient email(s) cannot be emtpy.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(message.Text))
            {
                DisplayAlert("Oops!", "Message cannot be emtpy.", "Ok");
                return;
            }

            if (!SENDING_MAIL)
            {
                statuses.Clear();
                SENDING_MAIL = true;
                loading.IsVisible = true;
                loading.IsRunning = true;
                send.BackgroundColor = Color.Red;
                send.Text = "Stop Send";

                Task.Run(async () =>
                {
                    int spam = Convert.ToInt32(repeat.Text);

                    if(spam < 1)
                    {
                        spam = 1;
                    }

                    if(spam  > 30)
                    {
                        spam = 30;
                    }

                    for(int i = 0; i < spam; i++)
                    {
                        if (SENDING_MAIL)
                        {
                            try
                            {
                                string mailfrom = mfrom.Text;

                                if (string.IsNullOrEmpty(mailfrom))
                                {
                                    mailfrom = "test@" + host.Text;
                                }

                                Socket socket;
                                socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                                socket.Connect(new IPEndPoint(Dns.GetHostEntry(host.Text).AddressList[0], Convert.ToInt32(port.Text)));
                                PrintRecv(socket);
                                string statusEhlo = SendCommand(socket, string.Format("EHLO {0}\r\n", host.Text));

                                if (statusEhlo.Substring(0, 3) == "250")
                                {
                                    string statusMailFrom = SendCommand(socket, string.Format("MAIL FROM:{0}\r\n", mailfrom));

                                    if (statusMailFrom.Substring(0, 3) == "250")
                                    {
                                        string statusRcpt = SendCommand(socket, string.Format("RCPT TO:{0}\r\n", rcpt.Text));

                                        if (statusRcpt.Substring(0, 3) == "250")
                                        {
                                            string statusData = SendCommand(socket, "DATA\r\n");

                                            if (statusData.Substring(0, 3) == "250" || statusData.Substring(0, 3) == "354")
                                            {
                                                SendCommand(socket, string.Format("{0}\r\n", subject.Text));
                                                System.Threading.Thread.Sleep(500);
                                                SendCommand(socket, message.Text + "\r\n");
                                                System.Threading.Thread.Sleep(500);

                                                string statusSend = SendCommand(socket, ".\r\n");

                                                //string statusSend = SendCommand(socket, string.Format("{0}\r\n\r\n{1}\r\n.\r\n", subject.Text, message.Text));

                                                //SendCommand(socket, string.Format("{0}\r\n\r\n", subject.Text));
                                                //Task.Delay(500, new System.Threading.CancellationToken());
                                                //SendCommand(socket, "");
                                                //Task.Delay(500, new System.Threading.CancellationToken());
                                                //SendCommand(socket, message.Text + "\r\n");
                                                //Task.Delay(500, new System.Threading.CancellationToken());
                                                //string statusSend = SendCommand(socket, ".\r\n");

                                                if (statusSend.Substring(0, 3) == "250")
                                                {
                                                    statuses.Add("[SUCCESS] Mail sent.");
                                                    SendCommand(socket, "QUIT\r\n");
                                                    socket.Disconnect(true);
                                                }
                                                else
                                                {
                                                    statuses.Add("[FAILED] Mail not sent.");
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                statuses.Add("[FAILED] Command DATA rejected.");
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            statuses.Add("[FAILED] Command RCPT email rejected.");
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        statuses.Add("[FAILED] Command MAIL FROM email rejected.");
                                        break;
                                    }
                                }
                                else
                                {
                                    statuses.Add("[FAILED] EHLO command rejected.");
                                    break;
                                }
                            }
                            catch (Exception ex)
                            {
                                statuses.Add("[FAILED] Whole operation denied. Maybe the server is not reachable.");
                                break;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    
                    Device.BeginInvokeOnMainThread(() =>
                    {
                        loading.IsVisible = false;
                        loading.IsRunning = false;
                        send.BackgroundColor = Color.DarkGreen;
                        send.Text = "Start Send";
                        SENDING_MAIL = false;
                    });
                });
            }
            else
            {
                loading.IsVisible = false;
                loading.IsRunning = false;
                send.BackgroundColor = Color.DarkGreen;
                send.Text = "Start Send";
                SENDING_MAIL = false;
            }
        }

        string  SendCommand(Socket socket, string com)
        {
            Console.WriteLine("===============================================");
            Console.WriteLine(">>>" + com);
            socket.Send(Encoding.UTF8.GetBytes(com));
            return PrintRecv(socket);
        }
        string PrintRecv(Socket socket)
        {
            byte[] buffer = new byte[500];
            socket.Receive(buffer);
            string reply = Encoding.UTF8.GetString(buffer, 0, buffer.Length);
            Console.WriteLine("===============================================");
            Console.WriteLine("<<<" + Encoding.UTF8.GetString(buffer, 0, buffer.Length));

            return reply;
        }
    }
}