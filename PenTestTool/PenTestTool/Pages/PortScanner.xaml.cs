using Org.BouncyCastle.Asn1;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Shapes;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class PortScanner : ContentPage
    {
        static bool PORTSCAN_RUNNING = false;
        static string current_target = "";
        public PortScanner()
        {
            InitializeComponent();

            Title = "Port Scanner";

            start.Clicked += Start_Clicked;

            ToolbarItems.Add(new ToolbarItem()
            {
                Text = "About",
                Command = new Command(() =>
                {

                }),
                Order = ToolbarItemOrder.Primary
            });
        }

        private async void Start_Clicked(object sender, EventArgs e)
        {
            if (!PORTSCAN_RUNNING)
            {
                if (string.IsNullOrEmpty(target.Text))
                {
                    await DisplayAlert("Oops!", "Target input cannot be empty!", "Ok");

                    return;
                }

                string ipAddress = "";

                PORTSCAN_RUNNING = true;
                loading.IsVisible = true;
                loading.IsRunning = true;

                await Task.Run(() =>
                {
                    var assembly = Assembly.GetExecutingAssembly();
                    var resourceName = "PenTestTool.Datas.ports.txt";
                    bool default_port = false;

                    if (Convert.ToInt32(port_start.Text) < 1 || Convert.ToInt32(port_end.Text) < 1)
                    {
                        Device.BeginInvokeOnMainThread(() =>
                        {
                            result_viewer.Children.Add(new Label { Text = "Port start/end is 0 so scan via 1000 nmap default ports." });
                        });
                        
                        default_port = true;
                    }

                    List<int> ports = new List<int>();

                    if (default_port)
                    {
                        using (Stream stream = assembly.GetManifestResourceStream(resourceName))
                        using (StreamReader reader = new StreamReader(stream))
                        {
                            string line = reader.ReadToEnd();

                            List<string> portsT = line.Split(',').ToList<string>();

                            foreach (string port in portsT)
                            {
                                if (port.Contains('-'))
                                {
                                    string[] ps = port.Split('-');
                                    int pstart = Convert.ToInt32(ps[0]);
                                    int pend = Convert.ToInt32(ps[1]);

                                    if(pend < pstart)
                                    {
                                        pstart = 1;
                                    }

                                    if(pend > 65535)
                                    {
                                        pend = 65535;
                                    }

                                    for(int i = pstart; i <= pend; i++)
                                    {
                                        ports.Add(i);
                                    }
                                }
                                else
                                {
                                    ports.Add(Convert.ToInt32(port));
                                }
                            }
                        }
                    }
                    else
                    {
                        int portS = Convert.ToInt32(port_start.Text);
                        int portE = Convert.ToInt32(port_end.Text);

                        if(portE < portS)
                        {
                            portS = 1;
                        }

                        for(int i = portS; i <= portE; i++)
                        {
                            ports.Add(i);
                        }
                    }

                    Console.WriteLine("=====================");

                    foreach (int port in ports)
                    {
                        if (PORTSCAN_RUNNING)
                        {
                            try
                            {
                                Console.WriteLine("Testing: " + port);
                                Socket s = new Socket(AddressFamily.InterNetwork,
                                SocketType.Stream,
                                ProtocolType.Tcp);
                                s.ReceiveTimeout = 10000;
                                s.Connect(ipAddress, port);

                                Device.BeginInvokeOnMainThread(() =>
                                {
                                    result_viewer.Children.Add(new Label
                                    {
                                        Text = "[OPEN] " + ipAddress + ":" + port
                                    });
                                });

                                //s.Disconnect(false);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        else
                        {
                            break;
                        }
                        
                    }

                    Device.BeginInvokeOnMainThread(() =>
                    {
                        PORTSCAN_RUNNING = false;
                        loading.IsVisible = false;
                        loading.IsRunning = false;
                    });
                });
            }
            else
            {
                Device.BeginInvokeOnMainThread(() =>
                {
                    PORTSCAN_RUNNING = false;
                    loading.IsVisible = false;
                    loading.IsRunning = false;
                });
            }
        }
    }
}