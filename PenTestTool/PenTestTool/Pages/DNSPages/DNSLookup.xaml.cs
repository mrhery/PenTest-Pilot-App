using DnsClient;
using Org.BouncyCastle.Asn1.X500;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages.DNSPages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DNSLookup : ContentPage
    {
        public static bool DNSLOOKUP_RUNNING = false;
        List<Models.DNSRecord> rdns = new List<Models.DNSRecord>();

        public DNSLookup()
        {
            InitializeComponent();

            Title = "DNS Lookup";

            start.Clicked += Start_Clicked;

            dns_list.ItemSelected += Dns_list_ItemSelected;

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected IP",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if(dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if(dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.Address);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected Hostname",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if (dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if (dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.DomainName);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected Data",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if (dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if (dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.AllData);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy All Result",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    string x  = "";

                    foreach(var dns in rdns)
                    {
                        x += dns.AllData + "\n";
                    }

                    Xamarin.Essentials.Clipboard.SetTextAsync(x);
                })
            });
        }

        private void Dns_list_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {

        }

        private async void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(domain.Text))
            {
                await DisplayAlert("Oops!", "Domain name cannot be empty!", "Ok");
                return;
            }

            if (!DNSLOOKUP_RUNNING)
            {
                rdns.Clear();

                start.BackgroundColor = Color.Red;
                start.Text = "Stop Enum";

                loading.IsRunning = true;
                loading.IsVisible = true;

                DNSLOOKUP_RUNNING = true;

                await Task.Run(() =>
                {
                    try
                    {
                        NameServer[] nss = new NameServer[] {
                            new NameServer(IPAddress.Parse("8.8.8.8")),
                            new NameServer(IPAddress.Parse("8.8.4.4"))
                        };

                        var lookup = new LookupClient(nss);

                        var resultA = lookup.Query(domain.Text, QueryType.A).Answers.ARecords();

                        foreach (var address in resultA)
                        {
                            string d = address.RecordType.ToString();
                            d += " " + address.DomainName.ToString();
                            d += " [" + address.Address.ToString() + "]";
                            d += " TTL=" + address.TimeToLive.ToString();
                            d += " " + address.RecordClass.ToString();

                            rdns.Add(new Models.DNSRecord
                            {
                                RecordClass = address.RecordClass.ToString(),
                                RecordType = address.RecordType.ToString(),
                                DomainName  = address.DomainName.ToString(),
                                Address = address.Address.ToString(),
                                TimeToLive  = address.TimeToLive.ToString(),
                            });
                        }

                        var resultCNAME = lookup.Query(domain.Text, QueryType.CNAME).Answers.CnameRecords();

                        foreach (var addressx in resultCNAME)
                        {
                            string d = addressx.RecordType.ToString();
                            d += " " + addressx.DomainName.ToString();
                            //d += " [" + addressx.Address.ToString() + "]";
                            d += " TTL=" + addressx.TimeToLive.ToString();
                            d += " " + addressx.RecordClass.ToString();

                            rdns.Add(new Models.DNSRecord
                            {
                                RecordClass = addressx.RecordClass.ToString(),
                                RecordType = addressx.RecordType.ToString(),
                                DomainName = addressx.DomainName.ToString(),
                                Address = "",
                                TimeToLive = addressx.TimeToLive.ToString(),
                            });
                        }

                        var resultMX = lookup.Query(domain.Text, QueryType.MX).Answers.MxRecords();

                        foreach (var addressx in resultMX)
                        {
                            string ip = Dns.GetHostAddresses(addressx.Exchange.ToString())[0].ToString();

                            string d = addressx.RecordType.ToString();
                            d += " " + addressx.Exchange.ToString();
                            d += " [" + ip + "]";
                            d += " TTL=" + addressx.TimeToLive.ToString();
                            d += " " + addressx.RecordClass.ToString();

                            rdns.Add(new Models.DNSRecord
                            {
                                RecordClass = addressx.RecordClass.ToString(),
                                RecordType = addressx.RecordType.ToString(),
                                DomainName = addressx.Exchange.ToString(),
                                Address = ip,
                                TimeToLive = addressx.TimeToLive.ToString(),
                            });
                        }

                        var resultNS = lookup.Query(domain.Text, QueryType.NS).Answers.NsRecords();

                        foreach (var addressx in resultNS)
                        {
                            string ip = Dns.GetHostAddresses(addressx.NSDName.ToString())[0].ToString();

                            string d = addressx.RecordType.ToString();
                            d += " " + addressx.NSDName.ToString();
                            d += " [" + ip + "]";
                            d += " TTL=" + addressx.TimeToLive.ToString();
                            d += " " + addressx.RecordClass.ToString();

                            rdns.Add(new Models.DNSRecord
                            {
                                RecordClass = addressx.RecordClass.ToString(),
                                RecordType = addressx.RecordType.ToString(),
                                DomainName = addressx.NSDName.ToString(),
                                Address = ip,
                                TimeToLive = addressx.TimeToLive.ToString(),
                            });
                        }

                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSLOOKUP_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                            dns_list.ItemsSource = rdns;
                        });
                    }
                    catch (Exception ex)
                    {
                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSLOOKUP_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                            DisplayAlert("Oops!", ex.ToString(), "Ok");
                        });
                    }
                });
            }
            else
            {
                DNSLOOKUP_RUNNING = false;
                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Enum";

                if(rdns.Count > 0)
                {
                    dns_list.ItemsSource = rdns;
                }

                loading.IsRunning = false;
                loading.IsVisible = false;
            }
        }
    }
}