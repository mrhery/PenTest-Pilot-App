using DnsClient;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages.DNSPages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DNSEnum : ContentPage
    {
        public static bool DNSENUM_RUNNING = false;

        public DNSEnum()
        {
            InitializeComponent();

            Title = "DNS Enum";

            start.Clicked += Start_Clicked;
        }

        private void Dns_list_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            if(e.SelectedItem == null)
            {
                return;
            }

            ((ListView)sender).SelectedItem = null;
        }

        private async void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(domain.Text))
            {
                await DisplayAlert("Oops!", "Domain name cannot be empty!", "Ok");
                return;
            }

            if (!DNSENUM_RUNNING)
            {
                dns_list.Children.Clear();
                start.BackgroundColor = Color.Red;
                start.Text = "Stop Enum";
                DNSENUM_RUNNING = true;
                loading.IsRunning = true;
                loading.IsVisible = true;

                await Task.Run(() =>
                {
                    try
                    {
                        NameServer[] nss = new NameServer[] {
                            new NameServer(IPAddress.Parse("8.8.8.8")),
                            new NameServer(IPAddress.Parse("8.8.4.4"))
                        };

                        var assembly = Assembly.GetExecutingAssembly();
                        var resourceName = "PenTestTool.Datas.dns.txt";

                        using (Stream stream = assembly.GetManifestResourceStream(resourceName))
                        using (StreamReader reader = new StreamReader(stream))
                        {
                            Console.WriteLine("=============================");
                            string line;
                            while ((line = reader.ReadLine()) != null && DNSENUM_RUNNING)
                            {
                                try
                                {
                                    string hostname = line + "." + domain.Text;

                                    IPAddress[] ipx = Dns.GetHostAddresses(hostname);
                                    
                                    foreach (var address in ipx)
                                    {
                                        Device.BeginInvokeOnMainThread(() =>
                                        {
                                            string d = hostname;
                                            d += " : " + address.ToString();

                                            Device.BeginInvokeOnMainThread(() =>
                                            {
                                                dns_list.Children.Add(new Label() { Text = d, FontSize = 17});
                                            });
                                        });
                                    }
                                }
                                catch(Exception ex)
                                {
                                    //Console.WriteLine("=============================");
                                    //Console.WriteLine(ex.ToString());
                                    //Console.WriteLine("=============================");
                                }
                                
                            }
                        }

                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSENUM_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                            //dns_list.ItemsSource = addresses;
                        });
                    }
                    catch (Exception ex)
                    {
                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSENUM_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                            DisplayAlert("Oops!", ex.ToString(), "Ok");

                            //if (addresses.Count > 0)
                            //{
                            //    dns_list.ItemsSource = addresses;
                            //}

                        });
                    }
                });
            }
            else
            {
                DNSENUM_RUNNING = false;
                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Enum";

                loading.IsRunning = false;
                loading.IsVisible = false;

                //if(addresses.Count > 0)
                //{
                //    dns_list.ItemsSource = addresses;
                //}
            }
        }
    }
}