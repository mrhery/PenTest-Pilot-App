using DnsClient;
using Org.BouncyCastle.Asn1.X500;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages.DNSPages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DNSEnum : ContentPage
    {
        public static bool DNSENUM_RUNNING = false;
        ObservableCollection<Models.DNSRecord> rdns = new ObservableCollection<Models.DNSRecord>();

        public DNSEnum()
        {
            InitializeComponent();

            Title = "DNS Enum";

            start.Clicked += Start_Clicked;

            dns_list.ItemsSource = rdns;

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected IP",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if (dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if (dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.Address);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected Hostname",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if (dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if (dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.DomainName);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy Selected Data",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if (dns_list.SelectedItem == null)
                    {
                        DisplayAlert("Oops!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var dns = dns_list.SelectedItem as Models.DNSRecord;

                        if (dns != null)
                        {
                            Xamarin.Essentials.Clipboard.SetTextAsync(dns.AllData);
                        }
                    }
                })
            });

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy All Result",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    string x = "";

                    foreach (var dns in rdns)
                    {
                        x += dns.AllData + "\n";
                    }

                    Xamarin.Essentials.Clipboard.SetTextAsync(x);
                })
            });
        }

        private void Dns_list_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {

        }

        private async void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(domain.Text))
            {
                await DisplayAlert("Oops!", "Domain name cannot be empty!", "Ok");
                return;
            }

            if (!DNSENUM_RUNNING)
            {
                rdns.Clear();
                start.BackgroundColor = Color.Red;
                start.Text = "Stop Enum";
                DNSENUM_RUNNING = true;
                loading.IsRunning = true;
                loading.IsVisible = true;

                await Task.Run(() =>
                {
                    try
                    {
                        var assembly = Assembly.GetExecutingAssembly();
                        var resourceName = "PenTestTool.Datas.dns.txt";

                        using (Stream stream = assembly.GetManifestResourceStream(resourceName))
                        using (StreamReader reader = new StreamReader(stream))
                        {
                            string line;
                            while ((line = reader.ReadLine()) != null && DNSENUM_RUNNING)
                            {
                                try
                                {
                                    string hostname = line + "." + domain.Text;

                                    IPAddress[] ipx = Dns.GetHostAddresses(hostname);
                                    
                                    foreach (var address in ipx)
                                    {
                                        Device.BeginInvokeOnMainThread(() =>
                                        {
                                            string d = hostname;
                                            d += " : " + address.ToString();

                                            Device.BeginInvokeOnMainThread(() =>
                                            {
                                                rdns.Add(new Models.DNSRecord
                                                {
                                                    DomainName = hostname,
                                                    Address = address.ToString()
                                                });
                                            });
                                        });
                                    }
                                }
                                catch(Exception ex)
                                {

                                }
                            }
                        }

                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSENUM_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                        });
                    }
                    catch (Exception ex)
                    {
                        Device.BeginInvokeOnMainThread(() =>
                        {
                            loading.IsRunning = false;
                            loading.IsVisible = false;
                            DNSENUM_RUNNING = false;
                            start.BackgroundColor = Color.DarkGreen;
                            start.Text = "Start Enum";

                            DisplayAlert("Oops!", ex.ToString(), "Ok");

                            //if (addresses.Count > 0)
                            //{
                            //    dns_list.ItemsSource = addresses;
                            //}

                        });
                    }
                });
            }
            else
            {
                DNSENUM_RUNNING = false;
                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Enum";

                loading.IsRunning = false;
                loading.IsVisible = false;

                //if(addresses.Count > 0)
                //{
                //    dns_list.ItemsSource = addresses;
                //}
            }
        }
    }
}