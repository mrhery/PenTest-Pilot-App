using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

using Xamarin.Forms;
using Xamarin.Forms.Shapes;
using Xamarin.Forms.Xaml;

namespace PenTestTool.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class DirBuster : ContentPage
    {
        bool IS_BUSTIING = false;
        ObservableCollection<PathDir> rpaths = new ObservableCollection<PathDir>();
        public DirBuster()
        {
            InitializeComponent();

            Title = "Directory Buster";

            start.Clicked += Start_Clicked;
            result.ItemsSource = rpaths;

            ToolbarItems.Add(new ToolbarItem
            {
                Text = "Copy selected",
                Order = ToolbarItemOrder.Secondary,
                Command = new Command(() =>
                {
                    if(result.SelectedItem == null)
                    {
                        DisplayAlert("Oop!", "Please select an item to copy.", "Ok");
                    }
                    else
                    {
                        var data = result.SelectedItem as PathDir;
                        Xamarin.Essentials.Clipboard.SetTextAsync(data.path);
                    }
                })
            });
        }

        int MAXIMUM_THREAD = 20;
        int THREAD_USED = 0;

        async void Start_Clicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(url.Text))
            {
                await DisplayAlert("Oops!", "URL cannot be empty!", "Ok");
                return;
            }

            if (!IS_BUSTIING)
            {
                rpaths.Clear();
                IS_BUSTIING = true;
                loading.IsVisible = true;
                loading.IsRunning = true;

                start.BackgroundColor = Color.Red;
                start.Text = "Stop Busting";

                string rurl = url.Text.Trim('/');
                rurl += "/";

                await Task.Run(() =>
                {
                    List<string> path = new List<string>();

                    var assembly = Assembly.GetExecutingAssembly();
                    var resourceName = "PenTestTool.Datas.dirbcommon.txt";

                    using (Stream stream = assembly.GetManifestResourceStream(resourceName))
                    {
                        using (StreamReader reader = new StreamReader(stream))
                        {
                            while (!reader.EndOfStream)
                            {
                                path.Add(reader.ReadLine());
                            }
                        }
                    }

                    while (IS_BUSTIING)
                    {
                        if(THREAD_USED < MAXIMUM_THREAD)
                        {
                            if(path.Count > 0)
                            {
                                THREAD_USED++;
                                var p = path[0];
                                path.RemoveAt(0);

                                Task.Run(async () =>
                                {
                                    try
                                    {
                                        Console.WriteLine("Testing: " + rurl + p);
                                        var client = new HttpClient();
                                        var request = new HttpRequestMessage(HttpMethod.Get, rurl + p);
                                        var response = await client.SendAsync(request);

                                        int code = (int)response.StatusCode;

                                        if(code != 404)
                                        {
                                            rpaths.Add(new PathDir
                                            {
                                                path = "["+ code.ToString() +"] " + rurl + p
                                            });
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    THREAD_USED--;
                                });
                            }
                            else
                            {
                                Console.WriteLine("================END HERE-=================");

                                IS_BUSTIING = false;
                                THREAD_USED = 0;

                                Device.BeginInvokeOnMainThread(() =>
                                {
                                    IS_BUSTIING = false;
                                    loading.IsVisible = false;
                                    loading.IsRunning = false;

                                    start.BackgroundColor = Color.DarkGreen;
                                    start.Text = "Start Busting";
                                });
                            }
                        }
                    }                   
                });
            }
            else
            {
                IS_BUSTIING = false;
                loading.IsVisible = false;
                loading.IsRunning = false;

                start.BackgroundColor = Color.DarkGreen;
                start.Text = "Start Busting";
            }
        }

        class PathDir
        {
            public string path { get; set; }
        }
    }
}